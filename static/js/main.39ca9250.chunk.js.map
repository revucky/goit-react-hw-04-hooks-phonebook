{"version":3,"sources":["components/ContactForm/ContactForm.jsx","components/Fliter/Filter.jsx","components/Phonebook/ContactList.jsx","components/Phonebook/Phonebook.jsx","services/localStorage.js","components/App/App.jsx","index.js"],"names":["ContactForm","allContacts","onSubmit","useState","name","setName","number","setNumber","reset","isBtnDis","Object","values","some","value","e","preventDefault","toast","error","id","nanoid","type","onChange","target","pattern","title","required","disabled","Filter","ContactList","lists","onClick","map","STORAGE_KEY","Phonebook","key","JSON","parse","localStorage","getItem","storage","contacts","setContacts","filter","setFilter","useEffect","setItem","stringify","newContact","prevState","contact","toLowerCase","includes","ev","position","autoClose","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8PAsIeA,EAlIK,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,SAClC,EAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KAWMC,EAAQ,WACZH,EAAQ,IACRE,EAAU,KAGNE,EAAWC,OAAOC,OAAO,CAAEP,OAAME,WAAUM,MAAK,SAACC,GACrD,OAAQA,KAKV,OACE,uBAAMX,SArBa,SAACY,GACpBA,EAAEC,iBAEFd,EAAYW,MADQ,SAACX,GAAD,OAAiBA,EAAYG,OAASA,KAEtDY,IAAMC,MAAN,UAAeb,EAAf,qCACAF,EAAS,CAAEE,OAAME,SAAQY,GAAIC,YAAO,KACxCX,KAeA,UACE,yCAEE,uBACEY,KAAK,OACLhB,KAAK,OACLS,MAAOT,EACPiB,SAAU,SAACP,GAAD,OAAOT,EAAQS,EAAEQ,OAAOT,QAClCU,QAAQ,yHACRC,MAAM,2IACNC,UAAQ,OAGZ,uBACA,2CAEE,uBACEL,KAAK,MACLhB,KAAK,SAELS,MAAOP,EACPe,SAAU,SAACP,GAAD,OAAOP,EAAUO,EAAEQ,OAAOT,QACpCU,QAAQ,yFACRC,MAAM,iGACNC,UAAQ,OAGZ,uBACA,wBAAQL,KAAK,SAASM,SAAUjB,EAAhC,6BCpCSkB,EAlBA,SAAC,GAAyB,IAAvBN,EAAsB,EAAtBA,SAAUR,EAAY,EAAZA,MAC1B,OACE,gCACE,sDACA,uBACEO,KAAK,OACLhB,KAAK,SACLS,MAAOA,EACPQ,SAAU,SAACP,GAAD,OAAOO,EAASP,EAAEQ,OAAOT,cCa5Be,EArBK,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,QAC5B,OACE,8BACE,6BACGD,EAAME,KAAI,gBAAG3B,EAAH,EAAGA,KAAME,EAAT,EAASA,OAAQY,EAAjB,EAAiBA,GAAjB,OACT,+BACGd,EADH,KACWE,EACT,wBAAQc,KAAK,SAASF,GAAIA,EAAIY,QAASA,EAAvC,sBAFOZ,WCAbc,G,MAAc,YAsGLC,EApGG,WAChB,MAAgC9B,mBCHtB,SAAC+B,GACX,IACE,OAAOC,KAAKC,MAAMC,aAAaC,QAAQJ,IACvC,MAAOjB,GACP,OAAO,MDDgCsB,CAAYP,IAArD,mBAAOQ,EAAP,KAAiBC,EAAjB,KACA,EAA4BtC,mBAAS,IAArC,mBAAOuC,EAAP,KAAeC,EAAf,KAEAC,qBAAU,YCdC,SAACV,EAAKrB,GACjB,IACEwB,aAAaQ,QAAQX,EAAKC,KAAKW,UAAUjC,IACzC,MAAOI,GACP,OAAO,MDWPsB,CAAaP,EAAaQ,KACzB,CAACA,IAiBJ,OACE,gCACE,2CACA,cAAC,EAAD,CAAavC,YAAauC,EAAUtC,SAlBnB,SAAC6C,GACpBN,GAAY,SAACO,GAAD,4BAAmBA,GAAnB,CAA8BD,UAkBxC,0CACA,cAAC,EAAD,CAAQlC,MAAO6B,EAAQrB,SAZN,SAACR,GAAD,OAAW8B,EAAU9B,MAatC,cAAC,EAAD,CAAagB,MAXRW,EAASE,QAAO,SAACO,GAAD,OACrBA,EAAQ7C,KAAK8C,cAAcC,SAAST,EAAOQ,kBAUVpB,QAjBhB,SAACsB,GACpBX,EAAYD,EAASE,QAAO,SAACO,GAAD,OAAaA,EAAQ/B,KAAOkC,EAAG9B,OAAOJ,UAiBhE,cAAC,IAAD,CAAgBmC,SAAS,aAAaC,UAAW,UE5BxCC,EAVH,WACV,OACE,8BACE,mCACE,cAAC,EAAD,S,MCDRC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.39ca9250.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport { toast } from \"react-toastify\";\nimport { nanoid } from \"nanoid\";\n\nconst ContactForm = ({ allContacts, onSubmit }) => {\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n  //сабміт форми\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const isDuplicate = (allContacts) => allContacts.name === name;\n    allContacts.some(isDuplicate)\n      ? toast.error(`${name} already exist in your contacts!`)\n      : onSubmit({ name, number, id: nanoid(3) });\n    reset();\n  };\n  // ресет інпутов\n  const reset = () => {\n    setName(\"\");\n    setNumber(\"\");\n  };\n  //disabled 2 способи не активної кнопки\n  const isBtnDis = Object.values({ name, number }).some((value) => {\n    return !value;\n  });\n  // const requiredVal = [name, number];\n  // const isBtnDis = requiredVal.some((value) => !value);\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>\n        Name\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={(e) => setName(e.target.value)}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\" Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan \"\n          required\n        />\n      </label>\n      <br />\n      <label>\n        Number\n        <input\n          type=\"tel\"\n          name=\"number\"\n          // id={nanoid(3)}\n          value={number}\n          onChange={(e) => setNumber(e.target.value)}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\" Phone number must be digits and can contain spaces, dashes, parentheses and can start with + \"\n          required\n        />\n      </label>\n      <br />\n      <button type=\"submit\" disabled={isBtnDis}>\n        Add contact\n      </button>\n    </form>\n  );\n};\n\n// class ContactForm extends Component {\n//   state = {\n//     name: \"\",\n//     number: \"\",\n//   };\n// handleChange = (e) => {\n//   const { name, value } = e.currentTarget;\n//   this.setState({\n//     [name]: value,\n//   });\n// };\n\n//   handleSubmit = (e) => {\n//     e.preventDefault();\n//     const isDuplicate = this.checkIfDuplicate();\n//     if (isDuplicate) {\n//       return alert(`${this.state.name} already exist in your contacts!`);\n//     }\n//     this.props.onSubmit({ ...this.state, id: nanoid(3) });\n//     this.reset();\n//   };\n//   checkIfDuplicate = () =>\n//     this.props.allContacts.some(({ name }) => name === this.state.name);\n\n//   reset = () => {\n//     this.setState({ name: \"\", number: \"\" });\n//   };\n//   render() {\n//     const { handleChange, state, handleSubmit } = this;\n//     const { name, number } = state;\n//     const isBtnDis = Object.values(this.state).some((value) => {\n//       return !value;\n//     });\n//     return (\n//       <form onSubmit={handleSubmit}>\n//         <label>\n//           Name\n//           <input\n//             type=\"text\"\n//             name=\"name\"\n//             value={name}\n//             onChange={handleChange}\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//             title=\" Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan \"\n//             required\n//           />\n//         </label>\n//         <br />\n//         <label>\n//           Number\n//           <input\n//             type=\"tel\"\n//             name=\"number\"\n//             // id={nanoid(3)}\n//             value={number}\n//             onChange={handleChange}\n//             pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//             title=\" Phone number must be digits and can contain spaces, dashes, parentheses and can start with + \"\n//             required\n//           />\n//         </label>\n//         <br />\n//         <button type=\"submit\" disabled={isBtnDis}>\n//           Add contact\n//         </button>\n//       </form>\n//     );\n//   }\n// }\n\nexport default ContactForm;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Filter = ({ onChange, value }) => {\n  return (\n    <div>\n      <p>Find contacts by name</p>\n      <input\n        type=\"text\"\n        name=\"filter\"\n        value={value}\n        onChange={(e) => onChange(e.target.value)}\n      />\n    </div>\n  );\n};\n\nFilter.propTypes = {\n  value: PropTypes.string,\n};\n\nexport default Filter;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst ContactList = ({ lists, onClick }) => {\n  return (\n    <div>\n      <ul>\n        {lists.map(({ name, number, id }) => (\n          <li key={id}>\n            {name}: {number}\n            <button type=\"button\" id={id} onClick={onClick}>\n              delete\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nContactList.propTypes = {\n  lists: PropTypes.array,\n};\n\nexport default ContactList;\n","import { useState, useEffect } from \"react\";\nimport ContactForm from \"../ContactForm/ContactForm\";\nimport Filter from \"../Fliter/Filter\";\nimport ContactList from \"./ContactList\";\nimport { ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport * as storage from \"../../services/localStorage\";\n\nconst STORAGE_KEY = \"contacts\";\n\nconst Phonebook = () => {\n  const [contacts, setContacts] = useState(storage.get(STORAGE_KEY));\n  const [filter, setFilter] = useState(\"\");\n  //локал сторадж\n  useEffect(() => {\n    storage.save(STORAGE_KEY, contacts);\n  }, [contacts]);\n  // додавання\n  const handleCreate = (newContact) => {\n    setContacts((prevState) => [...prevState, newContact]);\n  };\n  // видалення\n  const handleDelete = (ev) => {\n    setContacts(contacts.filter((contact) => contact.id !== ev.target.id));\n  };\n  // пошук по імені\n  const handleFilter = (value) => setFilter(value);\n  const getFilter = () => {\n    return contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ContactForm allContacts={contacts} onSubmit={handleCreate} />\n      <h2>Contacts</h2>\n      <Filter value={filter} onChange={handleFilter} />\n      <ContactList lists={getFilter()} onClick={handleDelete} />\n      <ToastContainer position=\"top-center\" autoClose={3000} />\n    </div>\n  );\n};\n\n// class Phonebook extends React.Component {\n//   state = {\n//     contacts: [],\n//     filter: \"\",\n//   };\n//\n\n// componentDidMount() {\n//   const savedContact = storage.get(STORAGE_KEY);\n//   if (savedContact) {\n//     this.setState({ contacts: savedContact });\n//   }\n// }\n\n// componentDidUpdate(prevProps, prevState) {\n//   const { contacts } = this.state;\n//   if (prevState.contacts !== contacts) {\n//     storage.save(STORAGE_KEY, contacts);\n//   }\n// }\n\n//зміни\n// handleChange = (e) => {\n//   const { name, value } = e.currentTarget;\n//   this.setState({ [name]: value });\n// };\n// створення\n//   handleCreate = (newContact) => {\n//     this.setState((prevState) => ({\n//       contacts: [...prevState.contacts, newContact],\n//     }));\n//   };\n//   //видалення\n//   handleDelete = (ev) => {\n//     this.setState((prevState) => ({\n//       contacts: prevState.contacts.filter(\n//         (contact) => contact.id !== ev.target.id\n//       ),\n//     }));\n//   };\n\n//   handleFilter = (value) => this.setState({ filter: value });\n//   getFilter = () => {\n//     const { contacts, filter } = this.state;\n//     return contacts.filter((contact) =>\n//       contact.name.toLowerCase().includes(filter.toLowerCase())\n//     );\n//   };\n\n//   render() {\n//     const { handleCreate, handleDelete, handleFilter, getFilter } = this;\n//     const { filter, contacts } = this.state;\n\n//     return (\n//       <div>\n//         <h1>Phonebook</h1>\n//         <ContactForm allContacts={contacts} onSubmit={handleCreate} />\n//         <h2>Contacts</h2>\n//         <Filter value={filter} onChange={handleFilter} />\n//         <ContactList lists={getFilter()} onClick={handleDelete} />\n//       </div>\n//     );\n//   }\n// }\n\nexport default Phonebook;\n","const save = (key, value) => {\n  try {\n    localStorage.setItem(key, JSON.stringify(value));\n  } catch (error) {\n    return null;\n  }\n};\n\nconst get = (key) => {\n  try {\n    return JSON.parse(localStorage.getItem(key));\n  } catch (error) {\n    return null;\n  }\n};\n\nconst remove = (key) => {\n  try {\n    return localStorage.removeItem(key);\n  } catch (error) {\n    return null;\n  }\n};\n\nexport { get, save, remove };\n","import Phonebook from \"../Phonebook/Phonebook\";\n\nconst App = () => {\n  return (\n    <div>\n      <>\n        <Phonebook />\n      </>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App/App\";\nimport \"./styles/index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}